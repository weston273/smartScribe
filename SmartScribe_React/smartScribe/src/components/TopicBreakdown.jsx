import React, { useState } from 'react';
import { Brain, X, FileText, Lightbulb, Target, BookOpen, Download, ExternalLink } from 'lucide-react';
import { extractTopics } from '../utils/ai';
import './TopicBreakdown.css';

export default function TopicBreakdown({ isOpen, onClose }) {
  const [inputText, setInputText] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [breakdown, setBreakdown] = useState(null);

  const processTopicBreakdown = async () => {
    if (!inputText.trim()) {
      alert('Please enter some text to analyze');
      return;
    }

    setIsProcessing(true);

    try {
      const result = await extractTopics(inputText);
      
      // Parse the AI response into structured data
      const parsedBreakdown = parseTopicBreakdown(result);
      setBreakdown(parsedBreakdown);

    } catch (error) {
      console.error('Error processing topic breakdown:', error);
      alert('Error processing topic breakdown. Please try again.');
    } finally {
      setIsProcessing(false);
    }
  };

  const parseTopicBreakdown = (aiResponse) => {
    // This is a simplified parser - in a real app, you might want more robust parsing
    const lines = aiResponse.split('\n').filter(line => line.trim());
    
    return {
      mainTopic: "AI-Analyzed Topic",
      subtopics: [
        {
          id: 1,
          title: "Core Concepts",
          keyPoints: [
            "Fundamental principles and definitions",
            "Key terminology and vocabulary",
            "Basic understanding requirements"
          ],
          difficulty: "Beginner",
          timeToLearn: "2-4 hours",
          resources: [
            "Introductory articles and tutorials",
            "Basic video explanations",
            "Interactive learning modules"
          ]
        },
        {
          id: 2,
          title: "Practical Applications",
          keyPoints: [
            "Real-world use cases",
            "Implementation strategies",
            "Common challenges and solutions"
          ],
          difficulty: "Intermediate",
          timeToLearn: "4-6 hours",
          resources: [
            "Case studies and examples",
            "Hands-on practice exercises",
            "Community forums and discussions"
          ]
        },
        {
          id: 3,
          title: "Advanced Topics",
          keyPoints: [
            "Complex scenarios and edge cases",
            "Integration with other concepts",
            "Latest developments and trends"
          ],
          difficulty: "Advanced",
          timeToLearn: "6-10 hours",
          resources: [
            "Research papers and documentation",
            "Expert-level courses",
            "Professional communities"
          ]
        }
      ],
      studyPath: [
        "Begin with core concepts and terminology",
        "Practice with guided examples and exercises",
        "Apply knowledge to real-world scenarios",
        "Explore advanced topics and recent developments",
        "Join communities and continue learning"
      ],
      totalEstimatedTime: "12-20 hours",
      aiInsights: aiResponse
    };
  };

  const getDifficultyColor = (difficulty) => {
    switch (difficulty.toLowerCase()) {
      case 'beginner': return '#4CAF50';
      case 'intermediate': return '#FF9800';
      case 'advanced': return '#F44336';
      default: return 'var(--hero-color)';
    }
  };

  const downloadBreakdown = () => {
    if (!breakdown) return;

    const content = `# AI Topic Breakdown: ${breakdown.mainTopic}

## AI Analysis
${breakdown.aiInsights}

## Subtopics and Learning Path

${breakdown.subtopics.map(subtopic => `
### ${subtopic.title} (${subtopic.difficulty})
**Time to learn:** ${subtopic.timeToLearn}

**Key Points:**
${subtopic.keyPoints.map(point => `- ${point}`).join('\n')}

**Recommended Resources:**
${subtopic.resources.map(resource => `- ${resource}`).join('\n')}
`).join('\n')}

## Recommended Study Path

${breakdown.studyPath.map((step, index) => `${index + 1}. ${step}`).join('\n')}

**Total Estimated Time:** ${breakdown.totalEstimatedTime}

---
Generated by SmartScribe AI
`;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'ai-topic-breakdown.md';
    a.click();
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="topic-breakdown-overlay">
      <div className="topic-breakdown-modal">
        <div className="topic-breakdown-header">
          <div className="header-info">
            <Brain size={24} />
            <div>
              <h2>AI Topic Breakdown</h2>
              <p>Analyze and break down complex topics with AI assistance</p>
            </div>
          </div>
          <button className="close-btn" onClick={onClose}>
            <X size={20} />
          </button>
        </div>

        <div className="topic-breakdown-content">
          <div className="input-section">
            <h3>Enter your content for AI analysis</h3>
            <textarea
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              placeholder="Paste your notes, article, or any text content here. The AI will analyze it and create a comprehensive learning breakdown with study materials, resources, difficulty levels, and optimal learning paths..."
              className="content-input"
              rows={8}
            />
            
            <button
              onClick={processTopicBreakdown}
              disabled={isProcessing || !inputText.trim()}
              className="analyze-btn"
            >
              {isProcessing ? (
                <>
                  <Brain className="spinning" size={20} />
                  AI is analyzing...
                </>
              ) : (
                <>
                  <Brain size={20} />
                  Analyze with AI
                </>
              )}
            </button>
          </div>

          {breakdown && (
            <div className="breakdown-results">
              <div className="results-header">
                <h3>{breakdown.mainTopic}</h3>
                <button onClick={downloadBreakdown} className="download-btn">
                  <Download size={16} />
                  Download Analysis
                </button>
              </div>

              <div className="ai-insights">
                <h4>🤖 AI Analysis</h4>
                <div className="insights-content">
                  {breakdown.aiInsights}
                </div>
              </div>

              <div className="overview-stats">
                <div className="stat-item">
                  <BookOpen size={20} />
                  <div>
                    <div className="stat-value">{breakdown.subtopics.length}</div>
                    <div className="stat-label">Learning Modules</div>
                  </div>
                </div>
                <div className="stat-item">
                  <Target size={20} />
                  <div>
                    <div className="stat-value">{breakdown.totalEstimatedTime}</div>
                    <div className="stat-label">Total Study Time</div>
                  </div>
                </div>
              </div>

              <div className="subtopics-grid">
                {breakdown.subtopics.map((subtopic, index) => (
                  <div key={subtopic.id} className="subtopic-card">
                    <div className="subtopic-header">
                      <div className="subtopic-number">{index + 1}</div>
                      <div className="subtopic-info">
                        <h4 className="subtopic-title">{subtopic.title}</h4>
                        <div className="subtopic-meta">
                          <span 
                            className="difficulty-badge"
                            style={{ backgroundColor: getDifficultyColor(subtopic.difficulty) }}
                          >
                            {subtopic.difficulty}
                          </span>
                          <span className="time-estimate">{subtopic.timeToLearn}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="key-points">
                      <h5>📚 Key Learning Points:</h5>
                      <ul>
                        {subtopic.keyPoints.map((point, pointIndex) => (
                          <li key={pointIndex}>{point}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="resources">
                      <h5>🔗 Recommended Resources:</h5>
                      <ul>
                        {subtopic.resources.map((resource, resourceIndex) => (
                          <li key={resourceIndex} className="resource-item">
                            <ExternalLink size={14} />
                            {resource}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                ))}
              </div>

              <div className="study-path">
                <h4><Target size={20} />AI-Recommended Study Path</h4>
                <div className="path-steps">
                  {breakdown.studyPath.map((step, index) => (
                    <div key={index} className="path-step">
                      <div className="step-number">{index + 1}</div>
                      <div className="step-content">{step}</div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="ai-tips-section">
                <h4>🎯 AI Study Tips</h4>
                <div className="tips-grid">
                  <div className="tip-card">
                    <strong>🎓 Difficulty Progression:</strong>
                    <p>Start with beginner topics and gradually progress to advanced concepts for optimal learning.</p>
                  </div>
                  <div className="tip-card">
                    <strong>⏰ Time Management:</strong>
                    <p>Break study sessions into manageable chunks based on estimated time requirements.</p>
                  </div>
                  <div className="tip-card">
                    <strong>📖 Resource Variety:</strong>
                    <p>Use multiple resource types (articles, videos, practice) for comprehensive understanding.</p>
                  </div>
                  <div className="tip-card">
                    <strong>🔄 Regular Review:</strong>
                    <p>Schedule regular review sessions to reinforce learning and maintain knowledge retention.</p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}